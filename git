git add ... to undo "git add" do => git reset
git add --all (adds all modified and unstaged files)
git add docs/*.txt (directoy and file formats to add)
git add docs/ (add  all the files in the directory)
git add "*.txt" (add all the files in the whole project)


Staging and remotes

git diff --staged (view staged difference)

git reset HEAD <filename> (unstage the files ,HEAD refers to last commit,current branch)

git checkout -- <Filename> (blow away all changes since last commit)

git commit -a -m "commit message" (-a add changes from all tracked files,doesn't add new untracked files)

undoing a commit (dont do these after push)
git reset --soft HEAD^ (soft -reset into staging.^ move to
 commit before head i.e last commit)

git reset --hard HEAD^ (undo last commit and all changes .. only if something went horribly )

git reset --hard HEAD^^ (undo last 2 commits and all changes)

sharing coding

git remote add <name> <address>
git remote add origin https://address (add:new remote,origin: our name for this remote(can be any name))

git remote -v (show remote reps)

forgot to add a file in commit
git add <filename>
git commit --amend -m "message" (amend adds to the last commit)


git push -u origin master(origin: remote rep name, master:local branch to push)

git remote rm <name> (remove remotes)

git pull


merging a branch to master
git checkout master
git merge branch_name


Remote branch and tags

git push origin branch_name (pushing your local branch to remote )

git branch -r (to see all the remote branch)

git remote show origin

git push origin :branch_name (to delete the remote branch Note: you will still have local branch)

git branch -d branch_name (delete branch locally ..force delete use capital -D)

If say someone delete the branch and your working on it 
do check

git remote show origin
then
git remote prune origin (to clean up the remote branches)


Tagging
A tag is a reference to a commit(used mostly for release versioning )

git tag (list all tags)

git checkout tag_name (checkout code at commit)

git tag -a tag_name -m "message" (to add new tag)

git push --tags (git push tags)

git checkout tag_name

Rebase

git rebase
1.Move all changes to master which are note in origin/master to a temporary area.
2. Run all origin/master commits
3. Run all commits in the temporary area,one at a time


coloring the log
git config --global color.ui true

git log in oneline
git log --pretty=oneline

git log --oneline -p (patch output)

git log --oneline --stat (show how many insertion deletion where made)

git log  --oneline --graph (visual rep branches and commits)

date range  to see log
git log --until=1.minute.ago
git log --since=1.day.ago
git log --since=1.month.ago --until=2.weeks.ago


earlier commits
git diff HEAD^ (parent of latest commit)
git diff HEAD^^
git diff HEAD~5 (five commits ago)

git diff master another_branch_name (if you want to compare between to branches)

Blame
git blame file_name(to see complete history of the file,who made changes when and what changes where made)

excluding
when u want add a folder in project but dont want to add in git rep put the name of the folder in .git/info/exclude

remove files
git rm file_name

git rm --caced filename (wont be deleted from file system)

Aliases

git config --global alias.st status git st ==> git status
git confi --global  alias.co checkout
git confi --global  alias.br branch
git confi --global  alias.ci commit

_______old__________

git push origin branch (pushing branch in github)

git pull upstream master(pull latest code from forked master)

git push origin --delete branchname (delete branch from github)


git stash( the point where u want to create or work on other branch without commiting the current branch)

git stash list(to view list of stash)

git stash apply( to apply latest stash)

git stash apply stash@{2} (Specifying stash name) 

git branch -D brachname(deletes branch locally)
